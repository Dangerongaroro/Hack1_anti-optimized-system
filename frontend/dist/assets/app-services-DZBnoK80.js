import{g as e}from"./app-experience-strings-BqK52NS_.js";import{c as t}from"./vendor-supabase-Dt5fFsft.js";const n=t("https://yaynpwnwefgnbzguzrrl.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlheW5wd253ZWZnbmJ6Z3V6cnJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwNDM1MzksImV4cCI6MjA2NDYxOTUzOX0.R4NqJQx_pp-eRqha-NjsYE8cWBPtUOAurrcTTWLc74U",{auth:{autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}}),a="https://seren-paths-backend.onrender.com/api",o=new Map;async function s(e,t={}){const{data:{session:o}}=await n.auth.getSession();if(!o)throw console.warn("User not authenticated, using fallback"),new Error("Not authenticated");const s=await fetch(`${a}${e}`,{...t,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.access_token}`,...t.headers}});if(!s.ok)throw new Error(`API Error: ${s.status}`);return s.json()}const r={getAIEnabled:()=>"false"!==localStorage.getItem("aiEnabled"),setAIEnabled:e=>{localStorage.setItem("aiEnabled",e.toString())},getAutoSaveEnabled:()=>"false"!==localStorage.getItem("autoSaveExperiences"),setAutoSaveEnabled:e=>{localStorage.setItem("autoSaveExperiences",e.toString())},checkHealth:async()=>{try{return(await fetch(`${a}/health`)).ok}catch(e){return!1}},checkConnection:async()=>{try{return(await fetch(`${a.replace("/api","")}/`,{method:"GET",timeout:5e3})).ok}catch(e){return!1}},getRecommendation:async(t,n,c=[])=>{if(!r.getAIEnabled())return console.log("🤖 AI disabled, using local recommendation"),e(t);const i=`rec_${t}_${JSON.stringify(n)}_${c.length}`,l=o.get(i);if(l&&Date.now()-l.timestamp<3e5)return console.log("📦 Using cached recommendation"),l.data;const d={level:t,preferences:n||{},experiences:c.slice(-10)};try{const e=await s("/recommendations",{method:"POST",body:JSON.stringify(d)});return o.set(i,{data:e,timestamp:Date.now()}),console.log("✅ Authenticated recommendation received:",e),e}catch(g){console.log("🔐 Authentication failed, trying public API");try{const e=await async function(e,t={}){const n=await fetch(`${a}${e}`,{...t,headers:{"Content-Type":"application/json",...t.headers}});if(!n.ok)throw new Error(`API Error: ${n.status}`);return n.json()}("/recommendations",{method:"POST",body:JSON.stringify(d)});return o.set(i,{data:e,timestamp:Date.now()}),console.log("✅ Public recommendation received:",e),e}catch(u){return console.warn("⚠️ API unavailable, using local recommendation:",u.message),e(t)}}},getUserStats:async(e=[])=>{try{const n=encodeURIComponent(JSON.stringify(e));try{return await s(`/user/stats?experiences=${n}`)}catch(t){const e=await fetch(`${a}/user/stats?experiences=${n}`);if(e.ok)return await e.json();throw new Error("Stats API failed")}}catch(n){console.warn("Failed to fetch user stats:",n)}return{total_experiences:e.length,diversity_score:.5,growth_trend:"成長中",recent_categories:[],achievements:[]}},getChallengeLevels:async()=>{try{try{return await s("/challenges/levels")}catch(e){const t=await fetch(`${a}/challenges/levels`);if(t.ok)return await t.json();throw new Error("Challenge levels API failed")}}catch(t){console.warn("Failed to fetch challenge levels:",t)}return{levels:{1:{name:"プチ・ディスカバリー",emoji:"🌱",description:"日常の小さな変化"},2:{name:"ウィークエンド・チャレンジ",emoji:"🚀",description:"半日～1日の挑戦"},3:{name:"アドベンチャー・クエスト",emoji:"⭐",description:"少し大きな体験"}}}},sendFeedback:async(e,t,n=[])=>{const o={experience_id:e,feedback:t,experiences:n.slice(-10)};try{try{const e=await s("/feedback",{method:"POST",body:JSON.stringify(o)});return console.log("✅ Authenticated feedback processed:",e),e}catch(c){const e=await fetch(`${a}/feedback`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();return console.log("✅ Public feedback processed:",t),t}}catch(i){return console.warn("Failed to send feedback, will retry later:",i.message),r.savePendingFeedback(e,t),{status:"pending",message:"Feedback saved for later"}}},updatePreferences:async e=>{if(r.getAutoSaveEnabled())try{try{return await s("/preferences/update",{method:"POST",body:JSON.stringify({experiences:e})})}catch(t){const n=await fetch(`${a}/preferences/update`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({experiences:e})});return await n.json()}}catch(n){console.error("設定の更新に失敗:",n)}else console.log("🔧 Auto-save disabled, skipping API call")},getVisualizationData:async e=>{if(!r.getAIEnabled())return console.log("🤖 AI disabled, skipping server-side visualization"),null;try{try{const t=await s("/visualization/experience-strings",{method:"POST",body:JSON.stringify(e)});return console.log("✅ Authenticated visualization data received"),t.data}catch(t){const n=await fetch(`${a}/visualization/experience-strings`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();return console.log("✅ Public visualization data received"),o.data}}catch(n){return console.error("❌ Server-side visualization failed:",n),null}},savePendingFeedback:(e,t)=>{try{const n=JSON.parse(localStorage.getItem("pendingFeedback")||"[]");n.push({experienceId:e,feedback:t,timestamp:Date.now()}),localStorage.setItem("pendingFeedback",JSON.stringify(n))}catch(n){console.error("Failed to save pending feedback:",n)}},savePendingPreferences:e=>{try{localStorage.setItem("pendingPreferences",JSON.stringify({experiences:e,timestamp:Date.now()}))}catch(t){console.error("Failed to save pending preferences:",t)}},syncPendingData:async()=>{try{const e=JSON.parse(localStorage.getItem("pendingFeedback")||"[]");for(const n of e)await r.sendFeedback(n.experienceId,n.feedback);e.length>0&&(localStorage.removeItem("pendingFeedback"),console.log(`✅ Synced ${e.length} pending feedback items`));const t=JSON.parse(localStorage.getItem("pendingPreferences")||"null");t&&(await r.updatePreferences(t.experiences),localStorage.removeItem("pendingPreferences"),console.log("✅ Synced pending preferences"))}catch(e){console.warn("Failed to sync pending data:",e.message)}},initialize:async()=>{try{await r.checkHealth()?(console.log("✅ API接続OK"),await r.syncPendingData()):console.log("⚠️ API未接続 - オフラインモード");const{data:{session:e}}=await n.auth.getSession();e?console.log("✅ Supabase認証済み"):console.log("ℹ️ Supabase未認証 - ゲストモード")}catch(e){console.error("API初期化エラー:",e)}},getAuthStatus:async()=>{const{data:{session:e}}=await n.auth.getSession();return{isAuthenticated:!!e,user:(null==e?void 0:e.user)||null,session:e}},signOut:async()=>{const{error:e}=await n.auth.signOut();if(e)throw console.error("Sign out error:",e),e;o.clear(),console.log("✅ Signed out successfully")}};export{r as a};
